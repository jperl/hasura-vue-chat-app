# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"columns and relationships of \"messages\""
type messages {
    content: String!
    id: Int!
    user_id: String!
}

"aggregated selection of \"messages\""
type messages_aggregate {
    aggregate: messages_aggregate_fields
    nodes: [messages!]!
}

"aggregate fields of \"messages\""
type messages_aggregate_fields {
    avg: messages_avg_fields
    count(columns: [messages_select_column!], distinct: Boolean): Int
    max: messages_max_fields
    min: messages_min_fields
    stddev: messages_stddev_fields
    stddev_pop: messages_stddev_pop_fields
    stddev_samp: messages_stddev_samp_fields
    sum: messages_sum_fields
    var_pop: messages_var_pop_fields
    var_samp: messages_var_samp_fields
    variance: messages_variance_fields
}

"aggregate avg on columns"
type messages_avg_fields {
    id: Float
}

"aggregate max on columns"
type messages_max_fields {
    content: String
    id: Int
    user_id: String
}

"aggregate min on columns"
type messages_min_fields {
    content: String
    id: Int
    user_id: String
}

"response of any mutation on the table \"messages\""
type messages_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [messages!]!
}

"aggregate stddev on columns"
type messages_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type messages_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type messages_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type messages_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type messages_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type messages_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type messages_variance_fields {
    id: Float
}

"mutation root"
type mutation_root {
    "delete data from the table: \"messages\""
    delete_messages(
        #filter the rows which have to be deleted
        where: messages_bool_exp!
    ): messages_mutation_response
    "insert data into the table: \"messages\""
    insert_messages(
        #the rows to be inserted
        objects: [messages_insert_input!]!,
        #on conflict condition
        on_conflict: messages_on_conflict
    ): messages_mutation_response
    "update data of the table: \"messages\""
    update_messages(
        #increments the integer columns with given value of the filtered values
        _inc: messages_inc_input,
        #sets the columns of the filtered rows to the given values
        _set: messages_set_input,
        #filter the rows which have to be updated
        where: messages_bool_exp!
    ): messages_mutation_response
}

"query root"
type query_root {
    "fetch data from the table: \"messages\""
    messages(
        #distinct select on columns
        distinct_on: [messages_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [messages_order_by!],
        #filter the rows returned
        where: messages_bool_exp
    ): [messages!]!
    "fetch aggregated fields from the table: \"messages\""
    messages_aggregate(
        #distinct select on columns
        distinct_on: [messages_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [messages_order_by!],
        #filter the rows returned
        where: messages_bool_exp
    ): messages_aggregate!
    "fetch data from the table: \"messages\" using primary key columns"
    messages_by_pk(id: Int!): messages
}

"subscription root"
type subscription_root {
    "fetch data from the table: \"messages\""
    messages(
        #distinct select on columns
        distinct_on: [messages_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [messages_order_by!],
        #filter the rows returned
        where: messages_bool_exp
    ): [messages!]!
    "fetch aggregated fields from the table: \"messages\""
    messages_aggregate(
        #distinct select on columns
        distinct_on: [messages_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [messages_order_by!],
        #filter the rows returned
        where: messages_bool_exp
    ): messages_aggregate!
    "fetch data from the table: \"messages\" using primary key columns"
    messages_by_pk(id: Int!): messages
}

"unique or primary key constraints on table \"messages\""
enum messages_constraint {
    #unique or primary key constraint
    messages_pkey
    #unique or primary key constraint
    messages_user_id_key
}

"select columns of table \"messages\""
enum messages_select_column {
    #column name
    content
    #column name
    id
    #column name
    user_id
}

"update columns of table \"messages\""
enum messages_update_column {
    #column name
    content
    #column name
    id
    #column name
    user_id
}

"column ordering options"
enum order_by {
    #in the ascending order, nulls last
    asc
    #in the ascending order, nulls first
    asc_nulls_first
    #in the ascending order, nulls last
    asc_nulls_last
    #in the descending order, nulls first
    desc
    #in the descending order, nulls first
    desc_nulls_first
    #in the descending order, nulls last
    desc_nulls_last
}

"expression to compare columns of type Int. All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

"order by aggregate values of table \"messages\""
input messages_aggregate_order_by {
    avg: messages_avg_order_by
    count: order_by
    max: messages_max_order_by
    min: messages_min_order_by
    stddev: messages_stddev_order_by
    stddev_pop: messages_stddev_pop_order_by
    stddev_samp: messages_stddev_samp_order_by
    sum: messages_sum_order_by
    var_pop: messages_var_pop_order_by
    var_samp: messages_var_samp_order_by
    variance: messages_variance_order_by
}

"input type for inserting array relation for remote table \"messages\""
input messages_arr_rel_insert_input {
    data: [messages_insert_input!]!
    on_conflict: messages_on_conflict
}

"order by avg() on columns of table \"messages\""
input messages_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"messages\". All fields are combined with a logical 'AND'."
input messages_bool_exp {
    _and: [messages_bool_exp]
    _not: messages_bool_exp
    _or: [messages_bool_exp]
    content: String_comparison_exp
    id: Int_comparison_exp
    user_id: String_comparison_exp
}

"input type for incrementing integer columne in table \"messages\""
input messages_inc_input {
    id: Int
}

"input type for inserting data into table \"messages\""
input messages_insert_input {
    content: String
    id: Int
    user_id: String
}

"order by max() on columns of table \"messages\""
input messages_max_order_by {
    content: order_by
    id: order_by
    user_id: order_by
}

"order by min() on columns of table \"messages\""
input messages_min_order_by {
    content: order_by
    id: order_by
    user_id: order_by
}

"input type for inserting object relation for remote table \"messages\""
input messages_obj_rel_insert_input {
    data: messages_insert_input!
    on_conflict: messages_on_conflict
}

"on conflict condition type for table \"messages\""
input messages_on_conflict {
    constraint: messages_constraint!
    update_columns: [messages_update_column!]!
    where: messages_bool_exp
}

"ordering options when selecting data from \"messages\""
input messages_order_by {
    content: order_by
    id: order_by
    user_id: order_by
}

"input type for updating data in table \"messages\""
input messages_set_input {
    content: String
    id: Int
    user_id: String
}

"order by stddev() on columns of table \"messages\""
input messages_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"messages\""
input messages_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"messages\""
input messages_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"messages\""
input messages_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"messages\""
input messages_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"messages\""
input messages_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"messages\""
input messages_variance_order_by {
    id: order_by
}
